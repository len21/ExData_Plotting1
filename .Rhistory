ls
getwd()
load("~/DSClass/RQuizz.RData")
library("swirl")
ls()
library("swirl")
ls()
rm(list-ls())
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
library("rstudio", lib.loc="~/R/win-library/3.1")
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[ c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- ("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
my_vector <- c(1:20)
info()
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
View(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric()
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical (my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
0 == 1
1 == 1
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 = 7
5 == 7
5 !== 7
help
5 != 7
! 5==7
FALSE & FALSE
true & c(true, false, false)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints >7)
any(ints <= 0)
any(ints < 0)
all(ints > 0)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source('~/DSClass/pollutantmean.R')
source('~/DSClass/pollutantmean.R')
cude <- function(x, n){}
cube <- function(x, n){x^3}
cude
cude(3)
cude <- function(3, n) {
x^3
}
cube <- function(3, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cude(3)
cube(3)
x <- 1:10
if (x > 5) {
x <- 0
}
z <- 10
f <- function (x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3){
NA
} else {
10
}
x <- 5
y <- if(x < 3){
NA
} else {
10
}
y
library(datasets)
data(iris)
head(iris)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
mean(iris$Species,$Sepal.Length)
tapply($Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length,iris[iris$Species == "virginica",], mean)
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg,mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
?split
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
?LETTERS
info()
nxt()
?letters
skip()
sample(LETTERS)
flips <- sample(c(0,1),prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips=1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
fligs2
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(100)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5)
rpois(5, lambda=10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
ColMeans(my_pois)
ColMeans(my_pois[ ,100])
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
c1 <- cut(Comdined$V2, breaks = 5)
## dowlload the file1
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1, destfile="./data/GDP.csv")
dt_gdp <- data.table(read.csv("./data/GDP.csv", header=T,skip=3, nrows=215))
## removes blank rows
dt_gdp <- dt_gdp[X != ""]
## rename a column
setnames(dt_gdp, "X", "CountryCode")
setnames(dt_gdp, "US.dollars.", "USdollars")
## remove blank cols
dt_gdp <- select(dt_gdp, -contains("X"))
## remove NA and get the 190 ranked countries
dt_gdp <- na.omit(dt_gdp)
## dowlload the file2
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile="./data/EDU.csv")
dt_edu<- data.table(read.csv("./data/EDU.csv", header=T)
##combine to data table
rbind_list(dt_gdp, dt_edu)
# merge datasets
combined <- merge(dt_gdp, dt_edu, by = "CountryCode", sort=TRUE)
combined <- combined[order(-Ranking)]
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1, destfile="./data/GDP.csv")
dt_gdp <- data.table(read.csv("./data/GDP.csv", header=T,skip=3, nrows=215))
## Plot 1: Global Active Power: household global minute-averaged active power (in kilowatt)
# Clean up workspace
rm(list=ls())
# set working directory to the location where the dataset was unzipped
setwd("C:\\Users\\Moira\\ExData_Plotting1")
# load the packages needed
library(datasets)
# read in the data to a data table
DT <- read.table("./data/household_power_consumption.txt", sep=";", header=TRUE, na.strings="?",colClasses=c("character","character","numeric","numeric","numeric","numeric","numeric","numeric"))
DT <- DT[(DT$Date == '1/2/2007') | (DT$Date == '2/2/2007'),]
# convert the columns to date type and time type
DT$Date = as.Date(DT$Date, "%d/%m/%Y")
# Create a new DateTime variable
DT$DateTime = as.POSIXct(paste(DT$Date, DT$Time), format="%Y-%m-%d %H:%M:%S")
# save plot as a PNG file with a width of 480 pixels and a height of 480 pixels.
png(filename = "plot1.png", width = 480, height = 480, units = "px", bg = "white")
# Draw a new plot
hist(DT$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
col="red")
dev.off()
## Plot 1: Global Active Power: household global minute-averaged active power (in kilowatt)
# Clean up workspace
rm(list=ls())
# set working directory to the location where the dataset was unzipped
setwd("C:\\Users\\Moira\\ExData_Plotting1")
# load the packages needed
library(datasets)
# read in the data to a data table
DT <- read.table("C:/Users/Moira/Documents/DSClass/DS4/data/household_power_consumption.txt", sep=";", header=TRUE, na.strings="?",colClasses=c("character","character","numeric","numeric","numeric","numeric","numeric","numeric"))
DT <- DT[(DT$Date == '1/2/2007') | (DT$Date == '2/2/2007'),]
# convert the columns to date type and time type
DT$Date = as.Date(DT$Date, "%d/%m/%Y")
# Create a new DateTime variable
DT$DateTime = as.POSIXct(paste(DT$Date, DT$Time), format="%Y-%m-%d %H:%M:%S")
# save plot as a PNG file with a width of 480 pixels and a height of 480 pixels.
png(filename = "plot1.png", width = 480, height = 480, units = "px", bg = "white")
# Draw a new plot
hist(DT$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
col="red")
dev.off()
## Plot 2: Global Active Power by Date Time
# Clean up workspace
rm(list=ls())
# set working directory to the location where the dataset was unzipped
setwd("C:\\Users\\Moira\\ExData_Plotting1")
# load the packages needed
library(datasets)
# read in the data to a data table
DT <- read.table("C:/Users/Moira/Documents/DSClass/DS4/data/household_power_consumption.txt", sep=";", header=TRUE, na.strings="?",colClasses=c("character","character","numeric","numeric","numeric","numeric","numeric","numeric"))
DT <- DT[(DT$Date == '1/2/2007') | (DT$Date == '2/2/2007'),]
# convert the columns to date type and time type
DT$Date = as.Date(DT$Date, "%d/%m/%Y")
# Create a new DateTime variable
DT$DateTime = as.POSIXct(paste(DT$Date, DT$Time), format="%Y-%m-%d %H:%M:%S")
# save plot as a PNG file with a width of 480 pixels and a height of 480 pixels.
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
# Draw a new plot using plot(x, y, ...)
plot(DT$DateTime, DT$Global_active_power,
xlab = "", # no label on X axis
ylab = "Global Active Power (kilowatts)", # label on y axis
type="l",  # set the type to line
col='black' # set color to black in case the default is not
)
dev.off()
## Plot 3: plot the 3 sub-metering values by the new datetime variable.
# Clean up workspace
rm(list=ls())
# set working directory to the location where the dataset was unzipped
setwd("C:\\Users\\Moira\\ExData_Plotting1")
# load the packages needed
library(datasets)
# read in the data to a data table
DT <- read.table("C:/Users/Moira/Documents/DSClass/DS4/data/household_power_consumption.txt", sep=";", header=TRUE, na.strings="?",colClasses=c("character","character","numeric","numeric","numeric","numeric","numeric","numeric"))
DT <- DT[(DT$Date == '1/2/2007') | (DT$Date == '2/2/2007'),]
# convert the columns to date type and time type
DT$Date = as.Date(DT$Date, "%d/%m/%Y")
# Create a new DateTime variable
DT$DateTime = as.POSIXct(paste(DT$Date, DT$Time), format="%Y-%m-%d %H:%M:%S")
# save plot as a PNG file with a width of 480 pixels and a height of 480 pixels.
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
# Draw a new plot using plot(x, y, ...)
plot(DT$DateTime, DT$Sub_metering_1,
xlab = "",                   # no label on X axis
ylab = "Energy sub metering", # label on y axis
type="l",                     # set the type to line
col='black')
lines(DT$DateTime, DT$Sub_metering_2, type="l", col="red")
lines(DT$DateTime, DT$Sub_metering_3, type="l", col="blue")
# add a legend for the lines
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty=1, col=c("black", "red", "blue"))
dev.off()
## Plot 4:
# Clean up workspace
rm(list=ls())
# set working directory to the location where the dataset was unzipped
setwd("C:\\Users\\Moira\\ExData_Plotting1")
# load the packages needed
library(datasets)
# read in the data to a data table
DT <- read.table("C:/Users/Moira/Documents/DSClass/DS4/data/household_power_consumption.txt", sep=";", header=TRUE, na.strings="?",colClasses=c("character","character","numeric","numeric","numeric","numeric","numeric","numeric"))
DT <- DT[(DT$Date == '1/2/2007') | (DT$Date == '2/2/2007'),]
# convert the columns to date type and time type
DT$Date = as.Date(DT$Date, "%d/%m/%Y")
# Create a new DateTime variable
DT$DateTime = as.POSIXct(paste(DT$Date, DT$Time), format="%Y-%m-%d %H:%M:%S")
# save plot as a PNG file with a width of 480 pixels and a height of 480 pixels.
png(filename = "plot4.png", width = 480, height = 480, units = "px", bg = "white")
# 4 plots arranged in 2 rows and 2 columns
par(mfrow=c(2,2))
# Plot1: top left
plot(DT$DateTime, DT$Global_active_power,
xlab = "", # no label on X axis
ylab = "Global Active Power", # label on y axis
type="l",  # set the type to line
col='black' # set color to black in case the default is not
)
#Plot 2: top right
plot(DT$DateTime, DT$Voltage,
xlab = "datetime", # no label on X axis
ylab = "Voltage", # label on y axis
type="l",  # set the type to line
col='black' # set color to black in case the default is not
)
#Plot 3: bottom left
plot(DT$DateTime, DT$Sub_metering_1,
xlab = "",                   # no label on X axis
ylab = "Energy sub metering", # label on y axis
type="l",                     # set the type to line
col='black')
lines(DT$DateTime, DT$Sub_metering_2, type="l", col="red")
lines(DT$DateTime, DT$Sub_metering_3, type="l", col="blue")
# add a legend for the lines
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty=1, col=c("black", "red", "blue"),bty = "n")
#Plot 4: bottom right
plot(DT$DateTime, DT$Global_reactive_power,
xlab = "datetime", # no label on X axis
ylab = "Global_reactive_power", # label on y axis
type="l",  # set the type to line
col='black' # set color to black in case the default is not
)
dev.off()
